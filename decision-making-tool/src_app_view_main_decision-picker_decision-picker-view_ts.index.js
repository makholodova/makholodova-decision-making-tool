"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_app_view_main_decision-picker_decision-picker-view_ts"],{

/***/ "./src/app/components/wheel-canvas.ts":
/*!********************************************!*\
  !*** ./src/app/components/wheel-canvas.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WheelCanvas: () => (/* binding */ WheelCanvas)\n/* harmony export */ });\n/* harmony import */ var _until_text_utiities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../until/text-utiities */ \"./src/app/until/text-utiities.ts\");\n/* harmony import */ var _until_generate_colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../until/generate-colors */ \"./src/app/until/generate-colors.ts\");\n/* harmony import */ var _until_shuffle_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../until/shuffle-array */ \"./src/app/until/shuffle-array.ts\");\n/* harmony import */ var _until_canvas_utiities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../until/canvas-utiities */ \"./src/app/until/canvas-utiities.ts\");\n/* harmony import */ var _until_ease_in_out__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../until/ease-in-out */ \"./src/app/until/ease-in-out.ts\");\n\n\n\n\n\nclass WheelCanvas {\n    constructor(decisionPickerView, listOfOptions, canvasElement, seconds) {\n        this.rotationAngle = 0;\n        this.isSpinning = false;\n        this.totalRotationAngle = 0;\n        this.totalDuration = 0;\n        this.decisionPickerView = decisionPickerView;\n        this.listOfOptions = (0,_until_shuffle_array__WEBPACK_IMPORTED_MODULE_2__.shuffleArray)(listOfOptions);\n        this.sectorColors = this.listOfOptions.map(() => (0,_until_generate_colors__WEBPACK_IMPORTED_MODULE_1__.getRandomColorRGB)());\n        this.canvas = canvasElement.getCanvasElement();\n        this.ctx = canvasElement.getContext();\n        this.duration = seconds;\n        this.spinStartTime = 0;\n        this.drawWheel();\n    }\n    drawWheel() {\n        this.ctx.strokeStyle = '#00000';\n        this.ctx.lineWidth = 1;\n        this.ctx.stroke();\n        const centerX = this.canvas.width / 2;\n        const centerY = this.canvas.height / 2;\n        const radius = Math.min(centerX, centerY) - 50;\n        const innerRadius = radius * 0.15;\n        (0,_until_canvas_utiities__WEBPACK_IMPORTED_MODULE_3__.clearCanvas)(this.ctx, this.canvas);\n        this.ctx.save();\n        this.ctx.translate(centerX, centerY);\n        this.ctx.rotate(this.rotationAngle);\n        this.ctx.translate(-centerX, -centerY);\n        this.drawWheelBase(centerX, centerY, radius);\n        this.drawWheelText(centerX, centerY, radius);\n        this.ctx.restore();\n        (0,_until_canvas_utiities__WEBPACK_IMPORTED_MODULE_3__.drawCircle)(this.ctx, centerX, centerY, innerRadius);\n        (0,_until_canvas_utiities__WEBPACK_IMPORTED_MODULE_3__.drawCursor)(this.ctx, centerX, centerY, radius);\n        (0,_until_canvas_utiities__WEBPACK_IMPORTED_MODULE_3__.drawStar)(this.ctx, centerX, centerY, radius);\n        if (this.isSpinning) {\n            this.updatePickedOption();\n        }\n    }\n    spinWheel(seconds) {\n        this.duration = seconds;\n        if (this.duration < 5)\n            return;\n        if (this.isSpinning)\n            return;\n        this.isSpinning = true;\n        this.decisionPickerView.setDisabledState(this.isSpinning);\n        this.decisionPickerView.showPickedOption(this.isSpinning);\n        this.spinStartTime = Date.now();\n        const rotationCount = this.duration + Math.random() * 3;\n        this.totalRotationAngle = 2 * Math.PI * rotationCount;\n        this.totalDuration = this.duration * 1000;\n        requestAnimationFrame(this.animateSpin.bind(this));\n    }\n    animateSpin() {\n        const timeCount = Date.now() - this.spinStartTime;\n        if (timeCount < this.totalDuration) {\n            const timeProgress = Math.max(0, Math.min((Date.now() - this.spinStartTime) / (this.duration * 1000), 1));\n            const animationProgress = (0,_until_ease_in_out__WEBPACK_IMPORTED_MODULE_4__.easeInOut)(timeProgress);\n            this.rotationAngle = this.totalRotationAngle * animationProgress;\n            this.drawWheel();\n            requestAnimationFrame(this.animateSpin.bind(this));\n        }\n        else {\n            this.isSpinning = false;\n            this.decisionPickerView.setDisabledState(this.isSpinning);\n            this.decisionPickerView.showPickedOption(this.isSpinning);\n            this.drawWheel();\n        }\n    }\n    drawWheelBase(centerX, centerY, radius) {\n        const totalWeight = this.listOfOptions.reduce((sum, option) => sum + Number(option.weight), 0);\n        let angleStart = -Math.PI / 2;\n        for (let index = 0; index < this.listOfOptions.length; index++) {\n            const weight = Number(this.listOfOptions[index].weight) / totalWeight;\n            const angle = 2 * Math.PI * weight;\n            const angleEnd = angleStart + angle;\n            this.ctx.beginPath();\n            this.ctx.moveTo(centerX, centerY);\n            this.ctx.arc(centerX, centerY, radius, angleStart, angleEnd);\n            this.ctx.closePath();\n            this.ctx.fillStyle = this.sectorColors[index];\n            this.ctx.fill();\n            this.ctx.stroke();\n            angleStart = angleEnd;\n        }\n    }\n    drawWheelText(centerX, centerY, radius) {\n        const totalWeight = this.listOfOptions.reduce((sum, option) => sum + Number(option.weight), 0);\n        let angleStart = -Math.PI / 2;\n        this.ctx.fillStyle = '#FFF';\n        this.ctx.font = '16px Arial';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.shadowBlur = 4;\n        this.ctx.shadowOffsetX = -2;\n        this.ctx.shadowOffsetY = -2;\n        for (const option of this.listOfOptions) {\n            const weight = Number(option.weight) / totalWeight;\n            const angle = 2 * Math.PI * weight;\n            const angleEnd = angleStart + angle;\n            this.ctx.save();\n            this.ctx.translate(centerX, centerY);\n            this.ctx.rotate(angleStart + angle / 2);\n            const textX = radius * 0.3;\n            const textY = 0;\n            const maxTextWidth = radius * 0.4;\n            let displayedText = option.title;\n            const textWidth = this.ctx.measureText(displayedText).width;\n            if (textWidth > maxTextWidth) {\n                displayedText = (0,_until_text_utiities__WEBPACK_IMPORTED_MODULE_0__.truncateText)(this.ctx, option.title, maxTextWidth);\n            }\n            const textFitAngle = textWidth / radius;\n            if (textFitAngle / 2 > angle) {\n                displayedText = '';\n            }\n            this.ctx.fillText(displayedText, textX, textY);\n            this.ctx.restore();\n            angleStart = angleEnd;\n        }\n        this.ctx.shadowColor = 'transparent';\n        this.ctx.shadowBlur = 0;\n        this.ctx.shadowOffsetX = 0;\n        this.ctx.shadowOffsetY = 0;\n    }\n    getCurrentPickedOption() {\n        let currentAngle = ((this.rotationAngle % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);\n        currentAngle = (-currentAngle + Math.PI / 2 + 2 * Math.PI) % (2 * Math.PI); // Корректируем направление\n        let currentOption = undefined;\n        let angleStart = 0;\n        for (const option of this.listOfOptions) {\n            const weight = Number(option.weight);\n            const totalWeight = this.listOfOptions.reduce((sum, option) => sum + Number(option.weight), 0);\n            const angle = (2 * Math.PI * weight) / totalWeight;\n            const angleEnd = angleStart + angle;\n            if (currentAngle >= angleStart && currentAngle < angleEnd) {\n                currentOption = option;\n                break;\n            }\n            angleStart = angleEnd;\n        }\n        return currentOption;\n    }\n    updatePickedOption() {\n        const pickedOption = this.getCurrentPickedOption();\n        if (pickedOption) {\n            this.decisionPickerView.setPickedOption(pickedOption.title);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/app/components/wheel-canvas.ts?");

/***/ }),

/***/ "./src/app/until/canvas-utiities.ts":
/*!******************************************!*\
  !*** ./src/app/until/canvas-utiities.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCanvas: () => (/* binding */ clearCanvas),\n/* harmony export */   drawCircle: () => (/* binding */ drawCircle),\n/* harmony export */   drawCursor: () => (/* binding */ drawCursor),\n/* harmony export */   drawStar: () => (/* binding */ drawStar)\n/* harmony export */ });\nfunction clearCanvas(context, canvas) {\n    context.resetTransform();\n    context.clearRect(0, 0, canvas.width, canvas.height);\n}\nfunction drawCursor(context, centerX, centerY, radius) {\n    /*context.beginPath();\n    context.moveTo(centerX - 25, centerY - radius - 20);\n    context.lineTo(centerX, centerY - radius - 7);\n    context.lineTo(centerX + 25, centerY - radius - 20);\n    context.lineTo(centerX, centerY - radius + 30);\n    context.closePath();*/\n    context.beginPath();\n    context.moveTo(centerX + radius + 20, centerY + 25);\n    context.lineTo(centerX + radius + 7, centerY);\n    context.lineTo(centerX + radius + 20, centerY - 25);\n    context.lineTo(centerX + radius - 30, centerY);\n    context.closePath();\n    context.fillStyle = 'rgba(49,255,195,0.99)';\n    context.fill();\n    context.stroke();\n}\nfunction drawStar(context, centerX, centerY, radius) {\n    const outerRadius = radius * 0.15;\n    const innerRadius = outerRadius * 0.5;\n    const points = 9;\n    const angleStep = (Math.PI * 2) / (points * 2);\n    context.beginPath();\n    for (let index = 0; index < points * 2; index++) {\n        const angle = index * angleStep - Math.PI / 2;\n        const r = index % 2 === 0 ? outerRadius : innerRadius;\n        const x = centerX + Math.cos(angle) * r;\n        const y = centerY + Math.sin(angle) * r;\n        if (index === 0) {\n            context.moveTo(x, y);\n        }\n        else {\n            context.lineTo(x, y);\n        }\n    }\n    context.closePath();\n    context.fillStyle = 'rgba(241,248,4,0.99)';\n    context.fill();\n    context.stroke();\n}\nfunction drawCircle(context, centerX, centerY, radius) {\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    context.fillStyle = '#FFF';\n    context.fill();\n    context.stroke();\n}\n\n\n//# sourceURL=webpack:///./src/app/until/canvas-utiities.ts?");

/***/ }),

/***/ "./src/app/until/ease-in-out.ts":
/*!**************************************!*\
  !*** ./src/app/until/ease-in-out.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easeInOut: () => (/* binding */ easeInOut)\n/* harmony export */ });\nfunction easeInOut(x) {\n    return x < 0.5 ? 4 * x ** 3 : 4 * x ** 3 - 12 * x ** 2 + 12 * x - 3;\n}\n\n\n//# sourceURL=webpack:///./src/app/until/ease-in-out.ts?");

/***/ }),

/***/ "./src/app/until/generate-colors.ts":
/*!******************************************!*\
  !*** ./src/app/until/generate-colors.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomColorRGB: () => (/* binding */ getRandomColorRGB)\n/* harmony export */ });\nfunction getRandomColorRGB() {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\n\n//# sourceURL=webpack:///./src/app/until/generate-colors.ts?");

/***/ }),

/***/ "./src/app/until/get-options-data.ts":
/*!*******************************************!*\
  !*** ./src/app/until/get-options-data.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOptionsData: () => (/* binding */ getOptionsData)\n/* harmony export */ });\n/* harmony import */ var _services_local_storage_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/local-storage-service */ \"./src/services/local-storage-service.ts\");\n\nfunction getOptionsData() {\n    const options = (0,_services_local_storage_service__WEBPACK_IMPORTED_MODULE_0__.loadOptions)();\n    const filteredOptions = options.filter((option) => {\n        return option.weight !== '' && option.title !== '';\n    });\n    return filteredOptions.length > 1 ? filteredOptions : undefined;\n}\n\n\n//# sourceURL=webpack:///./src/app/until/get-options-data.ts?");

/***/ }),

/***/ "./src/app/until/shuffle-array.ts":
/*!****************************************!*\
  !*** ./src/app/until/shuffle-array.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shuffleArray: () => (/* binding */ shuffleArray)\n/* harmony export */ });\nfunction shuffleArray(array) {\n    const shuffleArray = [...array];\n    for (let index = shuffleArray.length - 1; index > 0; index--) {\n        const k = Math.floor(Math.random() * (index + 1));\n        [shuffleArray[index], shuffleArray[k]] = [\n            shuffleArray[k],\n            shuffleArray[index],\n        ];\n    }\n    return shuffleArray;\n}\n\n\n//# sourceURL=webpack:///./src/app/until/shuffle-array.ts?");

/***/ }),

/***/ "./src/app/until/text-utiities.ts":
/*!****************************************!*\
  !*** ./src/app/until/text-utiities.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   truncateText: () => (/* binding */ truncateText)\n/* harmony export */ });\nfunction truncateText(context, text, maxWidth) {\n    const ellipsis = '...';\n    let textWidth = context.measureText(text).width;\n    while (text.length > 0 && textWidth > maxWidth) {\n        text = text.slice(0, -1);\n        textWidth = context.measureText(text + ellipsis).width;\n    }\n    return text + (textWidth > maxWidth ? '' : ellipsis);\n}\n\n\n//# sourceURL=webpack:///./src/app/until/text-utiities.ts?");

/***/ }),

/***/ "./src/app/view/main/decision-picker/decision-picker-view.ts":
/*!*******************************************************************!*\
  !*** ./src/app/view/main/decision-picker/decision-picker-view.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DecisionPickerView)\n/* harmony export */ });\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../view */ \"./src/app/view/view.ts\");\n/* harmony import */ var _until_element_creator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../until/element-creator */ \"./src/app/until/element-creator.ts\");\n/* harmony import */ var _router_pages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../router/pages */ \"./src/app/router/pages.ts\");\n/* harmony import */ var _components_wheel_canvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components/wheel-canvas */ \"./src/app/components/wheel-canvas.ts\");\n/* harmony import */ var _until_get_options_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../until/get-options-data */ \"./src/app/until/get-options-data.ts\");\n\n\n\n\n\nconst DEFAULT_DECISION_PICKER_CLASS = {\n    SECTION: 'decision-picker',\n    BUTTON: 'button',\n    BACK_BUTTON: 'back-button',\n    SOUND_BUTTON: 'sound-button',\n    PICK_BUTTON: 'pick-button',\n};\nconst defaultErrorParameters = {\n    tag: 'section',\n    classNames: [DEFAULT_DECISION_PICKER_CLASS.SECTION],\n};\nconst DecisionPickerContainerParameters = {\n    tag: 'form',\n    classNames: ['decision-picker-container'],\n};\nconst labelParameters = {\n    tag: 'label',\n    classNames: ['duration-label'],\n    textContent: 'Time: ',\n};\nconst inputParameters = {\n    tag: 'input',\n    classNames: ['duration'],\n    attributes: {\n        type: 'number',\n        value: '12',\n        min: '5',\n        required: 'true',\n        placeholder: 'sec',\n    },\n};\nconst pickedOptionParameters = {\n    tag: 'p',\n    classNames: ['picked-option'],\n    textContent: 'Press start button',\n};\nconst canvasParameters = {\n    tag: 'canvas',\n    classNames: ['wheel-canvas'],\n    textContent: 'Decision Picker Wheel',\n    attributes: { width: '512', height: '512' },\n};\nclass DecisionPickerView extends _view__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(router, sound) {\n        super(defaultErrorParameters);\n        this.buttons = [];\n        this.sounds = sound;\n        const listOfOptions = (0,_until_get_options_data__WEBPACK_IMPORTED_MODULE_4__.getOptionsData)();\n        if (listOfOptions) {\n            this.listOfOptions = listOfOptions;\n        }\n        else {\n            router.navigate(_router_pages__WEBPACK_IMPORTED_MODULE_2__.Pages.INDEX);\n            this.listOfOptions = [];\n        }\n        this.decisionPickerContainer = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator(DecisionPickerContainerParameters);\n        this.labelElement = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator(labelParameters);\n        this.inputElement = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator(inputParameters);\n        this.pickedOption = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator(pickedOptionParameters);\n        this.wheelCanvas = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator(canvasParameters);\n        this.configureView(router);\n        this.wheel = new _components_wheel_canvas__WEBPACK_IMPORTED_MODULE_3__.WheelCanvas(this, this.listOfOptions, this.wheelCanvas, this.getSeconds());\n    }\n    setPickedOption(value) {\n        this.pickedOption.getElement().textContent = value;\n    }\n    showPickedOption(isSpinning) {\n        if (isSpinning) {\n            this.pickedOption.getElement().classList.remove('picked');\n        }\n        else {\n            this.pickedOption.getElement().classList.add('picked');\n            this.sounds.playWinSound();\n        }\n    }\n    setDisabledState(isDisabled) {\n        for (const button of this.buttons) {\n            if (isDisabled) {\n                button.getElement().setAttribute('disabled', 'true');\n            }\n            else\n                button.getElement().removeAttribute('disabled');\n        }\n        if (isDisabled) {\n            this.inputElement.getElement().setAttribute('disabled', 'true');\n        }\n        else\n            this.inputElement.getElement().removeAttribute('disabled');\n    }\n    getSeconds() {\n        const durationElement = this.inputElement.getElement();\n        const durationValue = durationElement instanceof HTMLInputElement ? durationElement.value : '';\n        return Number(durationValue);\n    }\n    manageSoundsButton(event) {\n        const buttonElement = event.target;\n        if (buttonElement instanceof HTMLButtonElement) {\n            buttonElement.classList.toggle('sound-off', !this.sounds.enabled);\n        }\n        this.sounds.toggleAudio();\n    }\n    configureView(router) {\n        this.labelElement.addInnerElement(this.inputElement);\n        this.decisionPickerContainer.addInnerElement(this.labelElement);\n        const backButton = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator({\n            tag: 'button',\n            classNames: [\n                DEFAULT_DECISION_PICKER_CLASS.BUTTON,\n                DEFAULT_DECISION_PICKER_CLASS.BACK_BUTTON,\n            ],\n            textContent: 'Back',\n            attributes: { type: 'button' },\n            callback: () => {\n                router.navigate(_router_pages__WEBPACK_IMPORTED_MODULE_2__.Pages.INDEX);\n            },\n        });\n        const soundButton = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator({\n            tag: 'button',\n            classNames: [\n                DEFAULT_DECISION_PICKER_CLASS.BUTTON,\n                DEFAULT_DECISION_PICKER_CLASS.SOUND_BUTTON,\n            ],\n            attributes: { type: 'button' },\n            callback: (event) => {\n                this.manageSoundsButton(event);\n            },\n        });\n        const pickButton = new _until_element_creator__WEBPACK_IMPORTED_MODULE_1__.ElementCreator({\n            tag: 'button',\n            classNames: [\n                DEFAULT_DECISION_PICKER_CLASS.BUTTON,\n                DEFAULT_DECISION_PICKER_CLASS.PICK_BUTTON,\n            ],\n            textContent: 'Start',\n            attributes: { type: 'button' },\n            callback: () => {\n                this.wheel.spinWheel(this.getSeconds());\n            },\n        });\n        this.buttons.push(backButton, soundButton, pickButton);\n        this.decisionPickerContainer.addInnerElement(backButton);\n        if (this.sounds.enabled) {\n            soundButton.getElement().classList.add('sound-off');\n        }\n        this.decisionPickerContainer.addInnerElement(soundButton);\n        this.decisionPickerContainer.addInnerElement(pickButton);\n        this.viewElementCreator.addInnerElement(this.decisionPickerContainer);\n        this.viewElementCreator.addInnerElement(this.pickedOption);\n        this.viewElementCreator.addInnerElement(this.wheelCanvas);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/app/view/main/decision-picker/decision-picker-view.ts?");

/***/ }),

/***/ "./src/services/local-storage-service.ts":
/*!***********************************************!*\
  !*** ./src/services/local-storage-service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearOptions: () => (/* binding */ clearOptions),\n/* harmony export */   deleteOption: () => (/* binding */ deleteOption),\n/* harmony export */   loadOptions: () => (/* binding */ loadOptions),\n/* harmony export */   saveOptions: () => (/* binding */ saveOptions)\n/* harmony export */ });\nfunction saveOptions(options) {\n    localStorage.setItem('options-makholodova', JSON.stringify(options));\n}\nfunction loadOptions() {\n    const savedOptions = localStorage.getItem('options-makholodova');\n    if (savedOptions) {\n        try {\n            const parsedOptions = JSON.parse(savedOptions);\n            if (Array.isArray(parsedOptions) &&\n                parsedOptions.every((option) => 'id' in option && 'title' in option && 'weight' in option)) {\n                return parsedOptions;\n            }\n        }\n        catch (error) {\n            console.error('Failed to parse saved options:', error);\n        }\n    }\n    return [];\n}\nfunction clearOptions() {\n    localStorage.removeItem('options-makholodova');\n    localStorage.removeItem('optionIdCounter');\n}\nfunction deleteOption(id) {\n    const options = loadOptions();\n    const updatedOptions = options.filter((option) => option.id !== id);\n    saveOptions(updatedOptions);\n}\n\n\n//# sourceURL=webpack:///./src/services/local-storage-service.ts?");

/***/ })

}]);