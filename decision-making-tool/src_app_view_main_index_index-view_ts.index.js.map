{"version":3,"file":"src_app_view_main_index_index-view_ts.index.js","mappings":";;;;;;;;;;;;;;;AAA0D;AACH;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,6BAA6B,kEAAc;AAClD;AACA;AACA;AACA,wBAAwB,kEAAc;AACtC,4BAA4B,kEAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gCAAgC,kEAAc;AAC9C,iCAAiC,kEAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0CAA0C,eAAe,iBAAiB;AAC1E;AACA;AACA,sBAAsB,eAAe,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,sBAAsB,eAAe;AACrC,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvH0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,kEAAc;AACrD;AACA;AACA,6BAA6B,kEAAc;AAC3C,yBAAyB,kEAAc;AACvC,wBAAwB,kEAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;AClEmE;AAC5D;AACP,oBAAoB,4EAAW;AAC/B;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;ACPoD;AACmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,4BAA4B,4DAAc;AACjD;AACA;AACA;AACA,qCAAqC,4DAAc,+BAA+B,2BAA2B,yBAAyB;AACtI,sCAAsC,4DAAc,+BAA+B,4BAA4B,yBAAyB;AACxI,gCAAgC,4DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpFO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpBA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AAC8B;AACkC;AAClB;AAC4B;AAC2B;AAC/B;AACL;AACW;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,wBAAwB,6CAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAc;AAC7C,0BAA0B,wEAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB,uEAAc;AACvC,2CAA2C,8EAAiB;AAC5D;AACA;AACA;AACA,oCAAoC,gDAAK;AACzC,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,qBAAqB,iCAAiC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,kEAAc;AACtE;AACA;AACA;AACA,8BAA8B,4EAAa;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT,6BAA6B,qBAAqB;AAClD,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4EAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4EAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4EAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4EAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,4EAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kCAAkC,4EAAa;AAC/C,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5OO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA","sources":["webpack:///./src/app/components/paste-list-modal.ts","webpack:///./src/app/components/valid-options-modal.ts","webpack:///./src/app/until/get-options-data.ts","webpack:///./src/app/until/input-field/option-creator.ts","webpack:///./src/app/until/parse-from-csv.ts","webpack:///./src/app/view/main/index/index-view.ts","webpack:///./src/services/local-storage-service.ts"],"sourcesContent":["import { ElementCreator } from '../until/element-creator';\nimport { parseFromCSV } from '../until/parse-from-csv';\nconst dialogParameters = {\n    tag: 'dialog',\n    classNames: ['dialog'],\n};\nconst formParameters = {\n    tag: 'form',\n    classNames: ['form'],\n    callback: (event) => {\n        event.preventDefault();\n    },\n};\nconst textareaParameters = {\n    tag: 'textarea',\n    classNames: ['textarea'],\n    attributes: {\n        placeholder: 'textarea',\n        name: 'table',\n        rows: '12',\n        cols: '64',\n    },\n};\nexport class PasteListModal extends ElementCreator {\n    constructor(onConfirm) {\n        super(dialogParameters);\n        this.onConfirmCallback = onConfirm;\n        this.form = new ElementCreator(formParameters);\n        this.textarea = new ElementCreator(textareaParameters);\n        const cancelButtonParameters = {\n            tag: 'button',\n            classNames: ['button', 'cancel-button'],\n            textContent: 'Cancel',\n            attributes: {\n                type: 'button',\n            },\n            callback: this.close.bind(this),\n        };\n        const confirmButtonParameters = {\n            tag: 'button',\n            classNames: ['button', 'confirm-button'],\n            textContent: 'Confirm',\n            callback: () => {\n                this.handleConfirm();\n            },\n        };\n        this.cancelButton = new ElementCreator(cancelButtonParameters);\n        this.confirmButton = new ElementCreator(confirmButtonParameters);\n        this.addInnerElement(this.form);\n        this.form.addInnerElement(this.textarea);\n        this.form.addInnerElement(this.cancelButton);\n        this.form.addInnerElement(this.confirmButton);\n        this.setupEventListeners();\n    }\n    show() {\n        const element = this.getElement();\n        if (element instanceof HTMLDialogElement) {\n            element.showModal();\n        }\n    }\n    close() {\n        const element = this.getElement();\n        if (element instanceof HTMLDialogElement) {\n            element.close();\n        }\n        this.element.remove();\n    }\n    setupEventListeners() {\n        const element = this.getElement();\n        if (element instanceof HTMLDialogElement) {\n            element.addEventListener('click', (event) => {\n                if (event.target === element) {\n                    this.close();\n                }\n            });\n            element.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    this.close();\n                }\n            });\n        }\n    }\n    /*public parseFromCSV(csv: string): { title: string; weight?: string }[] {\n      if (!csv) return [];\n  \n      const result: { title: string; weight?: string }[] = [];\n  \n      csv.split('\\n').forEach((line: string): void => {\n        const fields = line.split(/[\\t,]\\s*!/);\n        if (fields.length === 0) return;\n  \n        let weight: string | undefined;\n        let title = fields.slice(0, -1).join(' ').trim();\n  \n        const lastField = fields.at(-1);\n        if (isNaN(Number(lastField))) {\n          title = fields.join(' ').trim();\n        } else {\n          weight = lastField;\n        }\n  \n        result.push({ title, weight });\n      });\n  \n      return result;\n    }*/\n    getValueTextarea() {\n        const csvElement = this.textarea.getElement();\n        return csvElement instanceof HTMLTextAreaElement ? csvElement.value : '';\n    }\n    handleConfirm() {\n        const parsedData = parseFromCSV(this.getValueTextarea());\n        this.onConfirmCallback(parsedData);\n        const textareaElement = this.textarea.getElement();\n        if (textareaElement instanceof HTMLTextAreaElement) {\n            textareaElement.value = '';\n        }\n        this.close();\n    }\n}\n","import { ElementCreator } from '../until/element-creator';\nconst dialogParameters = {\n    tag: 'dialog',\n    classNames: ['dialog'],\n};\nconst containerParameters = {\n    tag: 'div',\n    classNames: ['modal-container'],\n};\nconst titleParameters = {\n    tag: 'h3',\n    classNames: ['modal-title'],\n    textContent: 'Please add at least 2 valid options',\n};\nconst textParameters = {\n    tag: 'p',\n    classNames: ['modal-text'],\n    textContent: 'An option is considered valid if its title is not empty and its weight is greater than 0',\n};\nexport class ValidOptionsModal extends ElementCreator {\n    constructor() {\n        super(dialogParameters);\n        this.container = new ElementCreator(containerParameters);\n        this.title = new ElementCreator(titleParameters);\n        this.text = new ElementCreator(textParameters);\n        const closeButtonParameters = {\n            tag: 'button',\n            classNames: ['button', 'close-button'],\n            textContent: 'Close',\n            callback: this.close.bind(this),\n        };\n        this.closeButton = new ElementCreator(closeButtonParameters);\n        this.addInnerElement(this.container);\n        this.container.addInnerElement(this.title);\n        this.container.addInnerElement(this.text);\n        this.container.addInnerElement(this.closeButton);\n        this.setupEventListeners();\n    }\n    show() {\n        const element = this.getElement();\n        if (element instanceof HTMLDialogElement) {\n            element.showModal();\n        }\n    }\n    close() {\n        const element = this.getElement();\n        if (element instanceof HTMLDialogElement) {\n            element.close();\n        }\n        this.element.remove();\n    }\n    setupEventListeners() {\n        const element = this.getElement();\n        if (element instanceof HTMLDialogElement) {\n            element.addEventListener('click', (event) => {\n                if (event.target === element) {\n                    this.close();\n                }\n            });\n            element.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    this.close();\n                }\n            });\n        }\n    }\n}\n","import { loadOptions } from '../../services/local-storage-service';\nexport function getOptionsData() {\n    const options = loadOptions();\n    const filteredOptions = options.filter((option) => {\n        return option.weight !== '' && option.title !== '';\n    });\n    return filteredOptions.length > 1 ? filteredOptions : undefined;\n}\n","import { ElementCreator } from '../element-creator';\nimport { deleteOption } from '../../../services/local-storage-service';\nconst labelParameters = {\n    tag: 'label',\n    classNames: ['label'],\n};\nconst inputTitleParameters = {\n    tag: 'input',\n    classNames: ['title'],\n    attributes: {\n        type: 'text',\n        placeholder: 'title',\n    },\n};\nconst inputWeightParameters = {\n    tag: 'input',\n    classNames: ['weight'],\n    attributes: {\n        type: 'number',\n        placeholder: 'weight',\n    },\n};\nexport class OptionCreator extends ElementCreator {\n    constructor(parameters, onUpdate) {\n        super(parameters);\n        this.onUpdate = onUpdate;\n        this.inputTitleElement = new ElementCreator(Object.assign(Object.assign({}, inputTitleParameters), { callback: this.onUpdate }));\n        this.inputWeightElement = new ElementCreator(Object.assign(Object.assign({}, inputWeightParameters), { callback: this.onUpdate }));\n        this.labelElement = new ElementCreator(labelParameters);\n        const buttonParameters = {\n            tag: 'button',\n            classNames: ['button'],\n            textContent: 'Delete',\n            callback: this.removeElement.bind(this),\n        };\n        this.button = new ElementCreator(buttonParameters);\n        this.createElement(parameters);\n    }\n    setValueTitle(value) {\n        const element = this.inputTitleElement.getElement();\n        if (element instanceof HTMLInputElement) {\n            element.value = value;\n        }\n    }\n    setValueWeight(value) {\n        const element = this.inputWeightElement.getElement();\n        if (element instanceof HTMLInputElement) {\n            element.value = value.toString();\n        }\n    }\n    setValueId(value) {\n        const element = this.labelElement.getElement();\n        if (element instanceof HTMLElement) {\n            element.textContent = value;\n        }\n        this.element.id = value;\n    }\n    getValues() {\n        const titleElement = this.inputTitleElement.getElement();\n        const weightElement = this.inputWeightElement.getElement();\n        const labelElement = this.labelElement.getElement();\n        return {\n            title: titleElement instanceof HTMLInputElement ? titleElement.value : '',\n            weight: weightElement instanceof HTMLInputElement\n                ? weightElement.value || ''\n                : '',\n            id: labelElement.textContent || '',\n        };\n    }\n    removeElement() {\n        this.element.remove();\n        deleteOption(this.element.id);\n        if (this.onRemove) {\n            this.onRemove(this);\n        }\n        this.onUpdate();\n    }\n    createElement(parameters) {\n        super.createElement(parameters);\n        this.addInnerElement(this.labelElement);\n        this.addInnerElement(this.inputTitleElement);\n        this.addInnerElement(this.inputWeightElement);\n        this.addInnerElement(this.button);\n    }\n}\n","export function parseFromCSV(csv) {\n    if (!csv)\n        return [];\n    const result = [];\n    for (const line of csv.split('\\n')) {\n        const fields = line.split(/[\\t,]\\s*/);\n        if (fields.length === 0)\n            continue;\n        let weight;\n        let title = fields.slice(0, -1).join(' ').trim();\n        const lastField = fields.at(-1);\n        if (Number.isNaN(Number(lastField))) {\n            title = fields.join(' ').trim();\n        }\n        else {\n            weight = lastField;\n        }\n        result.push({ title, weight });\n    }\n    return result;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport View from '../../view';\nimport { ElementCreator } from '../../../until/element-creator';\nimport { Pages } from '../../../router/pages';\nimport { OptionCreator } from '../../../until/input-field/option-creator';\nimport { clearOptions, loadOptions, saveOptions, } from '../../../../services/local-storage-service';\nimport { PasteListModal } from '../../../components/paste-list-modal';\nimport { getOptionsData } from '../../../until/get-options-data';\nimport { ValidOptionsModal } from '../../../components/valid-options-modal';\nconst DEFAULT_INDEX_CLASS = {\n    OPTIONS: 'options',\n    BUTTON: 'button',\n    ADD_OPTION_BUTTON: 'add-option-button',\n    PASTE_LIST_BUTTON: 'paste-list-button',\n    CLEAR_LIST_BUTTON: 'clear-list-button',\n    SAVE_LIST_BUTTON: 'save-list-button',\n    LOAD_LIST_BUTTON: 'load-list-button',\n    START_BUTTON: 'start-button',\n};\nconst defaultErrorParameters = {\n    tag: 'section',\n    classNames: [DEFAULT_INDEX_CLASS.OPTIONS],\n};\nconst listParames = {\n    tag: 'ul',\n    classNames: ['option-list'],\n};\nexport default class IndexView extends View {\n    constructor(router, sound, parameters = defaultErrorParameters) {\n        super(parameters);\n        this.optionParames = {\n            tag: 'li',\n            classNames: ['option'],\n        };\n        this.optionIdCounter = 1;\n        this.optionInstances = [];\n        this.sounds = sound;\n        this.creatorList = new ElementCreator(listParames);\n        this.dialog = new PasteListModal((parsedData) => this.pasteList(parsedData));\n        this.configureView(router);\n    }\n    configureView(router) {\n        const buttons = [\n            {\n                class: DEFAULT_INDEX_CLASS.ADD_OPTION_BUTTON,\n                text: 'Add Option',\n                action: () => this.createAndAddOption(),\n            },\n            {\n                class: DEFAULT_INDEX_CLASS.PASTE_LIST_BUTTON,\n                text: 'Paste list',\n                action: () => {\n                    //this.dialog = new PasteListModal((parsedData) => this.pasteList(parsedData));\n                    document.body.append(this.dialog.getElement());\n                    this.dialog.show();\n                },\n            },\n            {\n                class: DEFAULT_INDEX_CLASS.CLEAR_LIST_BUTTON,\n                text: 'Clear list',\n                action: () => this.clearOptions(),\n            },\n            {\n                class: DEFAULT_INDEX_CLASS.SAVE_LIST_BUTTON,\n                text: 'Save list to file',\n                action: () => this.saveListToFile(),\n            },\n            {\n                class: DEFAULT_INDEX_CLASS.LOAD_LIST_BUTTON,\n                text: 'Load list from file',\n                action: () => this.loadListFromFile(),\n            },\n            {\n                class: DEFAULT_INDEX_CLASS.START_BUTTON,\n                text: 'Start',\n                action: () => {\n                    if (!getOptionsData()) {\n                        const dialog = new ValidOptionsModal();\n                        document.body.append(dialog.getElement());\n                        dialog.show();\n                    }\n                    router.navigate(Pages.DECISION_PICKER);\n                },\n            },\n        ];\n        this.loadOptions();\n        this.viewElementCreator.addInnerElement(this.creatorList);\n        for (const { class: className, text, action } of buttons) {\n            const buttonParameters = {\n                tag: 'button',\n                classNames: [DEFAULT_INDEX_CLASS.BUTTON, className],\n                textContent: text,\n                callback: action,\n            };\n            this.viewElementCreator.addInnerElement(new ElementCreator(buttonParameters));\n        }\n    }\n    createAndAddOption() {\n        const newOption = new OptionCreator(this.optionParames, () => {\n            if (this.optionInstances.length === 0) {\n                this.optionIdCounter = 1;\n            }\n            this.saveOptions();\n        });\n        const optionId = `#${this.optionIdCounter}`;\n        newOption.setValueId(`${optionId}`);\n        this.optionIdCounter++;\n        newOption.onRemove = (option) => {\n            this.removeOptionInstance(option);\n        };\n        this.optionInstances.push(newOption);\n        this.creatorList.addInnerElement(newOption);\n        this.saveOptions();\n    }\n    getOptionsData() {\n        return this.optionInstances.map((option) => option.getValues());\n    }\n    saveOptions() {\n        const options = this.getOptionsData();\n        saveOptions(options);\n        localStorage.setItem('optionIdCounter', String(this.optionIdCounter));\n    }\n    removeOptionInstance(option) {\n        this.optionInstances = this.optionInstances.filter((opt) => opt !== option);\n        this.saveOptions();\n    }\n    loadOptions() {\n        const savedOptions = loadOptions();\n        const savedCounter = localStorage.getItem('optionIdCounter');\n        if (savedCounter) {\n            this.optionIdCounter = Number.parseInt(savedCounter, 10);\n        }\n        if (savedCounter) {\n            for (const option of savedOptions) {\n                const newOption = new OptionCreator(this.optionParames, () => this.saveOptions());\n                newOption.setValueId(option.id);\n                newOption.setValueTitle(option.title);\n                newOption.setValueWeight(option.weight);\n                newOption.onRemove = (option) => this.removeOptionInstance(option);\n                this.optionInstances.push(newOption);\n                this.creatorList.addInnerElement(newOption);\n            }\n        }\n        else {\n            this.createAndAddOption();\n        }\n    }\n    clearOptions() {\n        clearOptions();\n        const listElement = this.creatorList.getElement();\n        while (listElement.firstChild) {\n            listElement.firstChild.remove();\n        }\n        this.optionIdCounter = 1;\n        this.optionInstances = [];\n        this.saveOptions();\n    }\n    saveListToFile() {\n        const options = loadOptions();\n        const lastId = this.optionIdCounter - 1;\n        const dataToSave = {\n            list: options,\n            lastId: lastId,\n        };\n        const optionsJson = JSON.stringify(dataToSave, undefined, 2);\n        const blob = new Blob([optionsJson], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'option-list.json';\n        link.click();\n        URL.revokeObjectURL(url);\n    }\n    loadListFromFile() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/json';\n        input.addEventListener('change', (event) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const target = event.target;\n            if (target instanceof HTMLInputElement) {\n                const file = (_a = target.files) === null || _a === void 0 ? void 0 : _a[0];\n                if (!file)\n                    return;\n                const result = yield file.text();\n                const data = JSON.parse(result);\n                if (!data.list ||\n                    !Array.isArray(data.list) ||\n                    typeof data.lastId !== 'number') {\n                    console.warn('Invalid file format, creating a new option.');\n                    this.createAndAddOption();\n                    return;\n                }\n                this.clearOptions();\n                this.optionIdCounter = data.lastId + 1;\n                for (const optionData of data.list) {\n                    const newOption = new OptionCreator(this.optionParames, () => this.saveOptions());\n                    newOption.setValueId(optionData.id);\n                    newOption.setValueTitle(optionData.title);\n                    newOption.setValueWeight(optionData.weight);\n                    newOption.onRemove = (option) => this.removeOptionInstance(option);\n                    this.optionInstances.push(newOption);\n                    this.creatorList.addInnerElement(newOption);\n                }\n                this.saveOptions();\n            }\n            else {\n                console.error('Unexpected target type:', target);\n            }\n        }));\n        input.click();\n    }\n    pasteList(parsedData) {\n        console.log('Received parsed data:', parsedData);\n        for (const optionData of parsedData) {\n            const newOption = new OptionCreator(this.optionParames, () => this.saveOptions());\n            const id = `#${this.optionIdCounter}`;\n            newOption.setValueId(id);\n            newOption.setValueTitle(optionData.title);\n            const weight = optionData.weight || '';\n            newOption.setValueWeight(weight);\n            newOption.onRemove = (option) => this.removeOptionInstance(option);\n            this.optionInstances.push(newOption);\n            this.creatorList.addInnerElement(newOption);\n            this.optionIdCounter++;\n        }\n        this.saveOptions();\n    }\n}\n","export function saveOptions(options) {\n    localStorage.setItem('options-makholodova', JSON.stringify(options));\n}\nexport function loadOptions() {\n    const savedOptions = localStorage.getItem('options-makholodova');\n    if (savedOptions) {\n        try {\n            const parsedOptions = JSON.parse(savedOptions);\n            if (Array.isArray(parsedOptions) &&\n                parsedOptions.every((option) => 'id' in option && 'title' in option && 'weight' in option)) {\n                return parsedOptions;\n            }\n        }\n        catch (error) {\n            console.error('Failed to parse saved options:', error);\n        }\n    }\n    return [];\n}\nexport function clearOptions() {\n    localStorage.removeItem('options-makholodova');\n    localStorage.removeItem('optionIdCounter');\n}\nexport function deleteOption(id) {\n    const options = loadOptions();\n    const updatedOptions = options.filter((option) => option.id !== id);\n    saveOptions(updatedOptions);\n}\n"],"names":[],"sourceRoot":""}